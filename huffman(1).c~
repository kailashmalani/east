
#include<string.h>
#include<stdio.h>
#include<limits.h>
#include<stdlib.h>
#define MAX 10

typedef struct node
{
        char ch;
        int freq;int code[10];
        struct node *left;
        struct node *right;
}node;

void printcode(node *root,int arr[], int top,char key);
void postorder(node *,char);
void decode(node *);
node * heap[100000];
int size;

void Init()
{
        size = 0;
        heap[0] = (node *)malloc(sizeof(node));
        heap[0]->freq = -INT_MAX;
}

void ins(node * ele)
{
      int i;
        size++;
        heap[size] = ele;
        int now = size;
        while(heap[now/2] -> freq > ele -> freq)	//check freq of child,if less exchnge
        {//parent is greater than child,so exchange the elements
                heap[now] = heap[now/2];
                now /= 2;
        }
        heap[now] = ele;
}

node * delmin()
{

        node * minele,*lastele;
        int child,now;
        minele = heap[1];
        lastele = heap[size--];
        for(now = 1; now*2 <= size ;now = child)
        {

                child = now*2;

                if(child != size && heap[child+1]->freq < heap[child] -> freq )
                {
                        child++;
                }

                if(lastele -> freq > heap[child] -> freq)
                {
                        heap[now] = heap[child];
                }
                else
                {
                        break;
                }
        }
        heap[now] = lastele;
        return minele;
}

void print(node *root,int arr[], int top)
{
	int i;
        if(root->left==NULL && root->right==NULL)
        {
		
                printf("Character:: %c || Code:: ",root->ch);
		for (i = 0; i < top; ++i){
			printf("%d",arr[i]);
			root->code[i] = arr[i];}
		//strcpy(root->code,arr);
		printf("\n");
                return;
        }
	if (root->left)
	{
		arr[top] = 0;
		print(root->left, arr, top + 1);
	}

	if (root->right)
	{
		arr[top] = 1;
		print(root->right, arr, top + 1);
	}
}

void printcode(node *root,int arr[], int top,char key)
{
	int i;
        if(root->left==NULL && root->right==NULL && root->ch==key)
        {
		
                //printf("Character:: %c || Code:: ",root->ch);
		for (i = 0; i < top; ++i)
			printf("%d",arr[i]);
		//return arr;
			
		//strcpy(root->code,arr);
		//printf("\n");
                return;
        }
	if (root->left)
	{
		arr[top] = 0;
		printcode(root->left, arr, top + 1,key);
	}

	if (root->right)
	{
		arr[top] = 1;
		printcode(root->right, arr, top + 1,key);
	}
}

int main()
{
        Init();
        int distinct_char,freq,i ;
        printf("\n-->Enter the no.of elements::\n");
        scanf("%d",&distinct_char);
        char ch;
        printf("\n-->Enter the Character and Frequency::\n");
        for(i=0;i<distinct_char;i++)
        {
                 node * temp = (node *) malloc(sizeof(node));
                scanf(" %c",&temp->ch);
                scanf("%d",&temp->freq);
                temp -> left = temp -> right = NULL;
                ins(temp);
        }
        if(distinct_char==1)
        {
                printf("char %c code 0\n",ch);
                return 0;
        }
        for(i=0;i<distinct_char-1 ;i++)
        {
                node * left = delmin();
                node * right =delmin();
                node * temp = (node *) malloc(sizeof(node));
                temp -> ch = 0;
                temp -> left = left;
                temp -> right = right;
                temp -> freq = left->freq + right -> freq;
                ins(temp);
        }
        node *tree = delmin();
        int code[512];
        //code[0] = '\0';
        print(tree,code,0);
	char encode[10],key;
	printf("Enter data to encode: ");
	scanf("%s",encode);
	
	for(i=0;i<strlen(encode);i++)
	{
		key = encode[i];
        	///postorder(tree,key);
		printcode(tree,code,0,key);
	}
        decode(tree);
        return 0;
}

void postorder(node *temp,char key)
{
    if(temp!=NULL)
    {
        postorder(temp->left,key);
        postorder(temp->right,key);
	if(key == temp->ch)
      	{  printf("%c->\n",temp->ch);
		//for(i=0;i<temp->code
	}
    }
}

void decode(node *root)
{
    char code[20],data[20];
    node *temp=NULL;
    int i=0,j=0;
    printf("\n\t Enter the data to be decoded :: ");
    scanf("%s",code);
    while(code[i]!='\0')
    {
        temp=root;
        while((temp->left!=NULL && temp->right!=NULL ) && code[i]!='\0')
        {
            if(code[i]=='1')
                 temp=temp->right;
            else if(code[i]=='0')
                temp=temp->left;
            i++;
        }
        if(temp->left==NULL && temp->right==NULL)
            data[j++]=temp->ch;
        else
        {
            printf("Error \n");
            exit(0);
        }
    }
    data[j]='\0';
    printf("\n Decoded Data :: %s",data);
}

